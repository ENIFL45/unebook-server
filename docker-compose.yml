version: "3"
services:
  db:
    image: "postgres:14.4-alpine"
    ports:
      - 5432:5432
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-unebooks}
      - POSTGRES_USER=${POSTGRES_USER:-dev}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - db_data:/var/lib/postgresql/data
  server:
    build:
      dockerfile: Dockerfile-development
      context: "."
    depends_on:
      - db
      - createbucket
    ports:
      - ${SERVER_PORT:-5000}:${SERVER_PORT:-5000}
    volumes:
      - ./src:/home/node/app/src
    environment:
      - NODE_ENV=development
      - SERVER_PORT=${SERVER_PORT:-5000}
      - CLIENT_URL=${CLIENT_URL:-localhost:3000}
      - POSTGRES_HOST=db
      - POSTGRES_DB=${POSTGRES_DB:-unebooks}
      - POSTGRES_USER=${POSTGRES_USER:-dev}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
      - POSTGRES_PORT=5432
      - PRIMARY_EMAIL=${PRIMARY_EMAIL:-unebook.support@amnet-systems.com}
      - PRIMARY_PASSWORD=${PRIMARY_PASSWORD:-Amnet@123}
      - PRIMARY_NAME=${PRIMARY_NAME:-Amnet}
      - SECONDARY_EMAIL=${SECONDARY_EMAIL:-alejandrof@unebook.es}
      - SECONDARY_PASSWORD=${SECONDARY_PASSWORD:-Unebooks@123}
      - SECONDARY_NAME=${SECONDARY_NAME:-Alejandro}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-84f5a1863937176a28b68562d22f8b75}
      - MAIL_HOST=${MAIL_HOST:-smtp.ethereal.email}
      - MAIL_AUTH_USER=${MAIL_AUTH_USER}
      - MAIL_AUTH_PASS=${MAIL_AUTH_PASS}
      - MAIL_SECURE=false
      - MAIL_PORT=${MAIL_PORT:-587}
      - MAIL_FROM=${MAIL_FROM:-Unebooks}
      - PUBLISHER_EMAIL_TO=${PUBLISHER_EMAIL_TO:-ament-systems@gmail.com}
      - PUBLISHER_EMAIL_CC=${PUBLISHER_EMAIL_CC}
      - MAIL_REPORT_TO=${MAIL_REPORT_TO:-unebook.support@amnet-systems.com}
      - MAIL_CONTACT_TO=${MAIL_CONTACT_TO:-alejandrof@unebook.es}
      - S3_PROTOCOL=http
      - S3_HOST=fileHosting
      - S3_REGION=${S3_REGION}
      - S3_PORT=${S3_PORT:-9000}
      - S3_ACCESS_KEY_ID=${S3_ACCESS_KEY_ID:-admin}
      - S3_SECRET_ACCESS_KEY=${S3_SECRET_ACCESS_KEY:-superSecretAdminPassword}
      - S3_BUCKET=${S3_BUCKET:-uploads}
  swagger:
    image: swaggerapi/swagger-ui
    ports:
      - "8080:8080"
    environment:
      SWAGGER_JSON: /api-docs/swagger.yaml
      BASE_URL: /unebookapi-docs
    volumes:
      - ./swagger.yaml:/api-docs/swagger.yaml
  fileHosting:
    image: minio/minio
    ports:
      - ${S3_PORT:-9000}:9000
      - ${MINIO_CONSOLE_PORT:-9001}:9001
    volumes:
      - minio_storage:/data
    environment:
      - MINIO_ROOT_USER=${MINIO_ROOT_USER:-admin}
      - MINIO_ROOT_PASSWORD=${MINIO_ROOT_PASSWORD:-superSecretAdminPassword}
    command: server --console-address ":${MINIO_CONSOLE_PORT:-9001}" /data
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:9000/minio/health/live']
      interval: 30s
      timeout: 20s
      retries: 3

  # Create non-root user and bucket that we'll connect to
  createbucket:
    image: minio/mc
    depends_on:
      - fileHosting
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc config host add unebookServer http://fileHosting:${S3_PORT:-9000} ${MINIO_ROOT_USER:-admin} ${MINIO_ROOT_PASSWORD:-superSecretAdminPassword};
      /usr/bin/mc admin user add unebookServer/ ${S3_ACCESS_KEY_ID:-nonRootUser} ${S3_SECRET_ACCESS_KEY:-nonRootPassword};
      /usr/bin/mc admin user enable unebookServer/ ${S3_ACCESS_KEY_ID:-nonRootUser};
      /usr/bin/mc mb unebookServer/${S3_BUCKET:-uploads};
      /usr/bin/mc admin policy attach unebookServer/ readwrite user=${S3_ACCESS_KEY_ID:-nonRootUser};
      exit 0;
      "
volumes:
  db_data: {}
  minio_storage:
